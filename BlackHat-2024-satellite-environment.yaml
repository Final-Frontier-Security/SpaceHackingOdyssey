AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for deploying EC2 instances for space vehicle cybersecurity course.

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.10.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SpaceVehicleVPC

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: SpaceVehicleIGW

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.10.20.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.10.10.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  OperatorSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH and RDP access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: '0.0.0.0/0'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '10.10.10.10/32'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '10.10.20.10/32'

  GroundStationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Deny all external traffic'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '10.10.20.20/32'
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '10.10.10.10/32'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0' # Allow all outbound traffic

  SatelliteSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Deny all external traffic'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
        - IpProtocol: udp
          FromPort: 0
          ToPort: 65535
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0' # Allow all outbound traffic

  EIP:
    Type: 'AWS::EC2::EIP'

  SpaceVehicleHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: spacevehicle.space
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneConfig:
        Comment: 'Private hosted zone for spacevehicle.space'

  GroundStationHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: groundstation.earth
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneConfig:
        Comment: 'Private hosted zone for groundstation.earth'

  OperatorStation:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 'c5.xlarge'
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref OperatorSecurityGroup
      ImageId: 'ami-0b4eeeedb09746c68' # Replace with the actual AMI ID
      KeyName: 'bhus24' # Replace with your key name
      PrivateIpAddress: '10.10.20.20'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: OperatorStation
    DependsOn: AttachGateway

  AssociateEIP:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      InstanceId: !Ref OperatorStation
      EIP: !Ref EIP

  OperatorStationDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref GroundStationHostedZone
      Name: operator.groundstation.earth
      Type: A
      TTL: '60'
      ResourceRecords:
        - !GetAtt OperatorStation.PrivateIpAddress

  GroundStation:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.xlarge'
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref GroundStationSecurityGroup
      ImageId: 'ami-021d420338c6803d5' # Replace with the actual AMI ID
      KeyName: 'bhus24' # Replace with your key name
      PrivateIpAddress: '10.10.20.10'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: GroundStation
    DependsOn: AttachGateway

  GroundStationDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref GroundStationHostedZone
      Name: cosmos.groundstation.earth
      Type: A
      TTL: '60'
      ResourceRecords:
        - !GetAtt GroundStation.PrivateIpAddress

  Satellite:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 'c5.xlarge'
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref SatelliteSecurityGroup
      ImageId: 'ami-0d1b30640d4c80725' # Replace with the actual AMI ID
      KeyName: 'bhus24' # Replace with your key name
      PrivateIpAddress: '10.10.10.10'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 150
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: Satellite
    DependsOn: AttachGateway

  SatelliteDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref SpaceVehicleHostedZone
      Name: moonlighter.spacevehicle.space
      Type: A
      TTL: '60'
      ResourceRecords:
        - !GetAtt Satellite.PrivateIpAddress

Outputs:
  OperatorStationPublicIP:
    Description: 'Public IP address of the OperatorStation'
    Value: !Ref EIP
  GroundStationPrivateIP:
    Description: 'Private IP address of the GroundStation'
    Value: !GetAtt GroundStation.PrivateIpAddress
  SatellitePrivateIP:
    Description: 'Private IP address of the Satellite'
    Value: !GetAtt Satellite.PrivateIpAddress
